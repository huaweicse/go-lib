package iam

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/go-chassis/foundation/httpclient"
	"github.com/huaweicse/auth"
	"github.com/pkg/errors"
)

const (
	HeaderToken = "X-Subject-Token"
	MIMEJson    = "application/json;charset=utf8"
)

type Client struct {
	c    *httpclient.URLClient
	opts Options
}
type Options struct {
	Endpoint  string
	AccessKey string
	SecretKey string
	Project   string
}

func NewClient(opts Options) (*Client, error) {
	sign, err := auth.GetSignFunc(opts.AccessKey, opts.SecretKey, opts.Project)
	if err != nil {
		return nil, err
	}
	hc, err := httpclient.GetURLClient(&httpclient.URLClientOption{
		SSLEnabled:  true,
		SignRequest: sign,
	})
	if err != nil {
		return nil, err
	}
	c := &Client{
		opts: opts,
		c:    hc,
	}
	return c, nil
}

func (c *Client) GetToken(user, pwd, domain string) (string, error) {
	a := &AutoGenerated{
		Auth: Auth{
			Identity: Identity{
				Methods: []string{"password"},
				Password: Password{
					User: User{
						Name:     user,
						Password: pwd,
						Domain: Domain{
							Name: domain,
						},
					},
				},
			},
			Scope: Scope{
				Domain: Domain{
					Name: domain,
				},
			},
		},
	}
	b, err := json.MarshalIndent(a, "", " ")
	if err != nil {
		return "", err
	}
	url := fmt.Sprintf("%s/%s", c.opts.Endpoint, "v3/auth/tokens")
	resp, err := c.c.HTTPDo("POST", url, map[string][]string{
		"Content-Type": {MIMEJson},
	}, b)
	if err != nil {
		return "", err
	}

	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return "", err
	}
	if resp.StatusCode != http.StatusCreated {
		return string(body), errors.New("wrong response")
	}

	return resp.Header.Get(HeaderToken), nil
}
